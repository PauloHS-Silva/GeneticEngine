============================= test session starts ==============================
platform darwin -- Python 3.12.4, pytest-8.4.0, pluggy-1.6.0
benchmark: 5.1.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)
rootdir: /Users/paulo/Desktop/GeneticEngine
configfile: pyproject.toml
plugins: benchmark-5.1.0, anyio-4.2.0
collected 459 items / 458 deselected / 1 selected

tests/representations/tree_based/weight_learning_test.py F               [100%]

=================================== FAILURES ===================================
____________ TestWeightLearning.test_weight_learning_adapts_grammar ____________

self = <geneticengine.algorithms.gp.operators.weight_learning.WeightLearningStep object at 0x105b9ac90>
problem = <geneticengine.problems.SingleObjectiveProblem object at 0x105e31040>
evaluator = <geneticengine.evaluation.sequential.SequentialEvaluator object at 0x1061c35f0>
representation = <geneticengine.representations.tree.treebased.TreeBasedRepresentation object at 0x1035dec60>
random = <geneticengine.random.sources.NativeRandomSource object at 0x1061976e0>
population = [<geneticengine.solutions.individual.PhenotypicIndividual object at 0x12176e840>, <geneticengine.solutions.individual....ndividual object at 0x121aee390>, <geneticengine.solutions.individual.PhenotypicIndividual object at 0x1028fc770>, ...]
target_size = 10, generation = 1

    def apply(
        self,
        problem: Problem,
        evaluator: Evaluator,
        representation: Representation,
        random: RandomSource,
        population: Iterator[PhenotypicIndividual],
        target_size: int,
        generation: int,
    ) -> Iterator[PhenotypicIndividual]:
        self.pre_iterate(problem, evaluator, representation, random, population, target_size, generation)
        current = []
>       for ind in self.iterate(problem, evaluator, representation, random, population, target_size, generation):
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

geneticengine/algorithms/gp/structure.py:49:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <geneticengine.algorithms.gp.operators.weight_learning.WeightLearningStep object at 0x105b9ac90>
problem = <geneticengine.problems.SingleObjectiveProblem object at 0x105e31040>
evaluator = <geneticengine.evaluation.sequential.SequentialEvaluator object at 0x1061c35f0>
representation = <geneticengine.representations.tree.treebased.TreeBasedRepresentation object at 0x1035dec60>
random = <geneticengine.random.sources.NativeRandomSource object at 0x1061976e0>
population = [<geneticengine.solutions.individual.PhenotypicIndividual object at 0x12176e840>, <geneticengine.solutions.individual....ndividual object at 0x121aee390>, <geneticengine.solutions.individual.PhenotypicIndividual object at 0x1028fc770>, ...]
target_size = 10, generation = 1

    def iterate(
        self,
        problem: Problem,
        evaluator: Evaluator,
        representation: Representation,
        random: RandomSource,
        population: Iterator[PhenotypicIndividual],
        target_size: int,
        generation: int,
    ) -> Iterator[PhenotypicIndividual]:
        population_list = list(population)
        candidates = list(evaluator.evaluate(problem, population_list))

        print("Candidates:", [(candidate.get_phenotype(), candidate.get_fitness(problem)) for candidate in candidates])

        best = non_dominated(iter(candidates), problem)

>       best_tree = next(best)
                    ^^^^^^^^^^
E       StopIteration

geneticengine/algorithms/gp/operators/weight_learning.py:90: StopIteration

The above exception was the direct cause of the following exception:

self = <weight_learning_test.TestWeightLearning object at 0x121d70cb0>

    def test_weight_learning_adapts_grammar(self):
        grammar = extract_grammar([Good, Bad, Leaf], Node)
        problem = SingleObjectiveProblem(fitness_function=fitness_function, minimize=False)
        representation = TreeBasedRepresentation(grammar, decider=MaxDepthDecider(NativeRandomSource(0), grammar, max_depth=5))

        gp_params = {
            "population_size": 10,
            "n_elites": 2,
            "novelty_size": 5,
            "tournament_size": 3,
            "crossover_probability": 0.9,
            "mutation_probability": 0.1,
            "learning_rate": 0.01,
        }

        main_evolution_step = ParallelStep(
            [
                ElitismStep(),
                NoveltyStep(),
                SequenceStep(
                    TournamentSelection(gp_params["tournament_size"]),
                    GenericCrossoverStep(gp_params["crossover_probability"]),
                    GenericMutationStep(gp_params["mutation_probability"]),
                ),
            ],
            weights=[
                gp_params["n_elites"],
                gp_params["novelty_size"],
                gp_params["population_size"] - gp_params["n_elites"] - gp_params["novelty_size"],
            ],
        )

        gp_step = SequenceStep(
            WeightLearningStep(gp_params["learning_rate"]),
            main_evolution_step
        )

        alg = GeneticProgramming(
            problem=problem,
            representation=representation,
            step=gp_step,
            population_size=gp_params["population_size"],
            budget=TimeBudget(5),
            random=NativeRandomSource(42),
        )

        all_initial_weights = grammar.get_weights()
        initial_weights = {prod_class: all_initial_weights[prod_class] for prod_class in grammar.alternatives[Node]}
        print(initial_weights)

>       print("Best solution tree", alg.search()[0])
                                    ^^^^^^^^^^^^

tests/representations/tree_based/weight_learning_test.py:112:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
geneticengine/algorithms/api.py:44: in search
    return self.perform_search()
           ^^^^^^^^^^^^^^^^^^^^^
geneticengine/algorithms/gp/gp.py:99: in perform_search
    population = Population(
geneticengine/algorithms/gp/population.py:11: in __init__
    for ind in it:
geneticengine/algorithms/gp/structure.py:49: in apply
    for ind in self.iterate(problem, evaluator, representation, random, population, target_size, generation):
geneticengine/algorithms/gp/operators/combinators.py:57: in iterate
    yield from npopulation
geneticengine/algorithms/gp/structure.py:49: in apply
    for ind in self.iterate(problem, evaluator, representation, random, population, target_size, generation):
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <geneticengine.algorithms.gp.operators.combinators.ParallelStep object at 0x105b57080>
problem = <geneticengine.problems.SingleObjectiveProblem object at 0x105e31040>
evaluator = <geneticengine.evaluation.sequential.SequentialEvaluator object at 0x1061c35f0>
representation = <geneticengine.representations.tree.treebased.TreeBasedRepresentation object at 0x1035dec60>
random = <geneticengine.random.sources.NativeRandomSource object at 0x1061976e0>
population = <generator object GeneticStep.apply at 0x121cdb100>
target_size = 10, generation = 1

    def iterate(
        self,
        problem: Problem,
        evaluator: Evaluator,
        representation: Representation,
        random: RandomSource,
        population: Iterator[PhenotypicIndividual],
        target_size: int,
        generation: int,
    ) -> Iterator[PhenotypicIndividual]:
>       npopulation: list[Individual] = [i for i in population]
                                        ^^^^^^^^^^^^^^^^^^^^^^^
E       RuntimeError: generator raised StopIteration

geneticengine/algorithms/gp/operators/combinators.py:108: RuntimeError
----------------------------- Captured stdout call -----------------------------
{<class 'weight_learning_test.Good'>: 0.3333333333333333, <class 'weight_learning_test.Bad'>: 0.3333333333333333, <class 'weight_learning_test.Leaf'>: 0.3333333333333333}
Bad(child=Bad(child=Good(child=Bad(child=Leaf()))))
Bad(child=Bad(child=Bad(child=Bad(child=Leaf()))))
Leaf()
Good(child=Bad(child=Good(child=Good(child=Leaf()))))
Leaf()
Leaf()
Leaf()
Good(child=Bad(child=Good(child=Leaf())))
Good(child=Leaf())
Bad(child=Bad(child=Leaf()))
Candidates: [(Bad(child=Bad(child=Good(child=Bad(child=Leaf())))), Fitness(fitness_components=[-2.0], valid=True)), (Bad(child=Bad(child=Bad(child=Bad(child=Leaf())))), Fitness(fitness_components=[-4.0], valid=True)), (Leaf(), Fitness(fitness_components=[0.0], valid=True)), (Good(child=Bad(child=Good(child=Good(child=Leaf())))), Fitness(fitness_components=[2.0], valid=True)), (Leaf(), Fitness(fitness_components=[0.0], valid=True)), (Leaf(), Fitness(fitness_components=[0.0], valid=True)), (Leaf(), Fitness(fitness_components=[0.0], valid=True)), (Good(child=Bad(child=Good(child=Leaf()))), Fitness(fitness_components=[1.0], valid=True)), (Good(child=Leaf()), Fitness(fitness_components=[1.0], valid=True)), (Bad(child=Bad(child=Leaf())), Fitness(fitness_components=[-2.0], valid=True))]
=========================== short test summary info ============================
FAILED tests/representations/tree_based/weight_learning_test.py::TestWeightLearning::test_weight_learning_adapts_grammar
====================== 1 failed, 458 deselected in 2.66s =======================
